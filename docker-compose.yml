version: '3.8'

services:
  db:
    image: postgres:15
    container_name: my_postgres
    environment:
      POSTGRES_DB: cafe
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck: # <-- Add this section
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] # Checks if DB is ready for connections
      interval: 5s # Check every 5 seconds
      timeout: 3s # Timeout after 3 seconds if check doesn't respond
      retries: 10 # Try 10 times before considering unhealthy (50 seconds total check time)
      start_period: 10s # Give the container 10 seconds to start before first check
volumes:
  pgdata: # Ensure this volume is defined at the top level if it wasn't already

  backend:
    build:
      context: .          # Root of project, so templates and backend are visible
      dockerfile: backend/Dockerfile
    image: swe40006_devops-backend:latest      
    container_name: billing_backend
    depends_on:
      - db
    environment:
      DB_HOST: db
      DB_NAME: cafe
      DB_USER: admin
      DB_PASSWORD: admin123
      DB_SSLMODE: disable  
    ports:
      - "5000:5000"
    depends_on: # <-- Ensure this is here
      db: # <-- Must match your DB service name
        condition: service_healthy # <-- Waits for DB healthcheck to pass
    healthcheck: # <-- Add backend healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:5000/"] # Checks if backend is responding on its port
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  frontend:
    build:
      context: ./templates
      dockerfile: Dockerfile
    image: swe40006_devops-frontend:latest     
    container_name: html_frontend
    ports:
      - "8080:80"
    depends_on:
      - backend

volumes:
  pgdata:
