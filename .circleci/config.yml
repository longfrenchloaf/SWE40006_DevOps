version: 2.1

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/project

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      # ls -al debug step from before is helpful, keep it for now
      - run:
          name: List files in build working directory
          command: ls -al ~/project
      - run:
          name: Build Docker Compose services
          # ls -al confirmed docker-compose.yml is at root, so -f is optional but harmless
          command: |
            docker-compose -f ~/project/docker-compose.yml build
            docker save swe40006_devops-backend:latest -o backend.tar
            docker save swe40006_devops-frontend:latest -o frontend.tar
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend.tar
            - frontend.tar

  test:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - setup_remote_docker

      # --- NEW Step to Install wait-for-it.sh ---
      # This step runs and fails independently if the download/chmod fails
      - run:
          name: Install wait-for-it.sh
          command: |
            sudo curl -sL https://github.com/vishnubob/wait-for-it/raw/master/wait-for-it.sh -o /usr/local/bin/wait-for-it.sh
            sudo chmod +x /usr/local/bin/wait-for-it.sh
      # --- END NEW Step ---

      # ls -al debug step from before is helpful, keep it for now
      - run:
          name: List files in test working directory
          command: ls -al ~/project

      - run:
          name: Load Docker images (backend/frontend)
          command: |
            docker load -i ~/project/backend.tar
            docker load -i ~/project/frontend.tar

      - run:
          name: Start services with docker-compose
          # ls -al confirmed docker-compose.yml is at root, so -f is optional but harmless
          command: docker-compose -f ~/project/docker-compose.yml up -d

      # --- Wait for Database Service (Cleaned up) ---
      # Corrected service name ('db') and internal port (5432)
      # Removed curl/chmod as they are now in a separate step
      - run:
          name: Wait for Database Service
          command: |
            echo "Waiting for database service at db:5432..."
            # Check if wait-for-it.sh exists (added for robustness)
            if [ ! -f "/usr/local/bin/wait-for-it.sh" ]; then
                echo "Error: wait-for-it.sh not found in /usr/local/bin/. Install step failed?"
                exit 1
            fi
            # Wait command is now standalone
            /usr/local/bin/wait-for-it.sh db:5432 -t 60 --strict || {
              echo "Database service did not become available within 60 seconds."
              # Use -f for logs for consistency (ls -al confirmed the path)
              docker-compose -f ~/project/docker-compose.yml logs db
              exit 1 # Fail the step if DB wait fails
            }
            echo "Database service is available."
      # --- End Wait for Database Service ---

      # --- Wait for Backend Service (Cleaned up) ---
      # Corrected service name ('backend') and internal port (5000 - based on your Flask code)
      # Removed curl/chmod as they are now in a separate step
      - run:
          name: Wait for Backend Service to Respond
          command: |
            echo "Waiting for backend service at backend:5000..."
            # Check if wait-for-it.sh exists
             if [ ! -f "/usr/local/bin/wait-for-it.sh" ]; then
                echo "Error: wait-for-it.sh not found in /usr/local/bin/. Install step failed?"
                exit 1
            fi
            # Wait command is now standalone
            /usr/local/bin/wait-for-it.sh backend:5000 -t 120 --strict || {
              echo "Backend service did not become available within 60 seconds."
              # Use -f for logs for consistency
              docker-compose -f ~/project/docker-compose.yml logs backend
              exit 1 # Fail the step if backend wait fails
            }
            echo "Backend service is available."

      # --- Run Integration Tests (Selenium) ---
      # APP_URL set to http://backend:5000/ based on your Flask code serving UI from backend
      - run:
          name: Run integration tests (Selenium)
          command: |
            DC_NETWORK=$(docker network ls -f name=.*_default --format "{{.Name}}" | head -n 1)
            echo "Running tests on network: $DC_NETWORK"
            docker run \
              --rm \
              --network $DC_NETWORK \
              --shm-size="2g" \
              -e APP_URL="http://backend:5000/" \
              food-billing-selenium-tests:latest

      # --- Capture Backend Logs (Keep this!) ---
      # Use -f for consistency
      - run:
          name: Capture Backend Logs
          command: docker-compose -f ~/project/docker-compose.yml logs backend
          when: always # Always run this step

      # Optional: Add steps here to store test results or artifacts if your tests generate them

  # ... push and deploy jobs ...
  push:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
      - run:
          name: Load Docker images
          command: |
            docker load -i ~/project/backend.tar
            docker tag swe40006_devops-backend:latest $ACR_NAME.azurecr.io/swe40006_devops-backend:latest

            docker load -i ~/project/frontend.tar
            docker tag swe40006_devops-frontend:latest $ACR_NAME.azurecr.io/swe40006_devops-frontend:latest
      - run:
          name: Push backend to ACR
          command: |
            echo $AZURE_PASSWORD | docker login $ACR_NAME.azurecr.io -u $AZURE_USERNAME --password-stdin
            docker push $ACR_NAME.azurecr.io/swe40006_devops-backend:latest
      - run:
          name: Push frontend to ACR
          command: |
            docker push $ACR_NAME.azurecr.io/swe40006_devops-frontend:latest

  deploy:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Install Azure CLI and Kubectl
          command: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

            KUBECTL_VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
            echo "Installing kubectl version $KUBECTL_VERSION"
            curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/kubectl
      - run:
          name: Login to Azure and set AKS credentials
          command: |
            az login --service-principal -u $AZURE_SP_APP_ID -p $AZURE_SP_CLIENT_SECRET --tenant $AZURE_TENANT_ID
            az aks get-credentials --resource-group "$AZURE_RESOURCE_GROUP" --name "$AKS_CLUSTER_NAME" --overwrite-existing
      - run:
          name: Deploy backend and frontend to AKS
          command: |
            kubectl apply -f k8s/db-secret.yaml
            kubectl apply -f k8s/backend-deployment.yaml
            kubectl apply -f k8s/backend-service.yaml
            kubectl apply -f k8s/frontend-deployment.yaml
            kubectl apply -f k8s/frontend-service.yaml
      - run:
          name: Restart Deployments to Pick Up Changes
          command: |
            kubectl rollout restart deployment backend-deployment
            kubectl rollout restart deployment frontend-deployment


workflows:
  build_test_push:
    jobs:
      - build
      - test:
          requires:
            - build
      - push:
          requires:
            - test
      - deploy:
          requires:
            - push