version: 2.1

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/project

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Compose services
          command: |
            docker-compose build
            docker save swe40006_devops-backend:latest -o backend.tar
            docker save swe40006_devops-frontend:latest -o frontend.tar
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend.tar
            - frontend.tar

  test:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
      - run:
          name: Load Docker images (backend/frontend)
          command: |
            docker load -i ~/project/backend.tar
            docker load -i ~/project/frontend.tar
      - run:
          name: Start services with docker-compose
          # Note: Consider using `docker-compose up --wait` if your docker-compose.yml
          # includes healthchecks for services. This is better than sleep.
          command: docker-compose up -d

      - run:
          name: Build Selenium test runner image
          command: docker build -t food-billing-selenium-tests -f tests/Dockerfile tests/

      # --- Improved Waiting Step ---
      - run:
          name: Wait for Backend Service to Respond
          command: |
            # Download wait-for-it.sh
            curl -sL https://github.com/vishnubob/wait-for-it/raw/master/wait-for-it.sh -o /usr/local/bin/wait-for-it.sh
            chmod +x /usr/local/bin/wait-for-it.sh

            # Wait for the backend service (named 'backend') on port 5000
            # Timeout after 60 seconds (-t 60). Adjust if your app takes longer.
            echo "Waiting for backend service at backend:5000..."
            /usr/local/bin/wait-for-it.sh backend:5000 -t 60 --strict || {
              echo "Backend service did not become available within 60 seconds."
              # Capture logs before failing
              docker-compose logs backend
              exit 1 # Fail the step if wait-for-it fails
            }
            echo "Backend service is available."
      # --- End of Improved Waiting Step ---

      - run:
          name: Run integration tests (Selenium)
          command: |
            # Find the docker-compose network name
            DC_NETWORK=$(docker network ls -f name=.*_default --format "{{.Name}}" | head -n 1)
            echo "Running tests on network: $DC_NETWORK"

            # Run the test container, connecting it to the docker-compose network.
            # APP_URL is now confirmed to be reachable
            docker run \
              --rm \
              --network $DC_NETWORK \
              --shm-size="2g" \
              -e APP_URL="http://backend:5000/" \
              food-billing-selenium-tests:latest

      # --- Add a step to capture backend logs on failure ---
      # This step will run *after* the tests fail (or pass)
      - run:
          name: Capture Backend Logs
          command: docker-compose logs backend
          when: always # Always run this step, even if previous steps fail

      # --- End of new steps for Selenium tests ---

      # The subsequent jobs (push, deploy) will only run if this test job succeeds.
      # If the 'docker run' command for the tests exits with a non-zero status,
      # this step (and thus the job) will fail.

  push:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
      - run:
          name: Load Docker images
          command: |
            docker load -i ~/project/backend.tar
            docker tag swe40006_devops-backend:latest $ACR_NAME.azurecr.io/swe40006_devops-backend:latest

            docker load -i ~/project/frontend.tar
            docker tag swe40006_devops-frontend:latest $ACR_NAME.azurecr.io/swe40006_devops-frontend:latest
      - run:
          name: Push backend to ACR
          command: |
            echo $AZURE_PASSWORD | docker login $ACR_NAME.azurecr.io -u $AZURE_USERNAME --password-stdin
            docker push $ACR_NAME.azurecr.io/swe40006_devops-backend:latest
      - run:
          name: Push frontend to ACR
          command: |
            docker push $ACR_NAME.azurecr.io/swe40006_devops-frontend:latest

  deploy:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Install Azure CLI and Kubectl
          command: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

            KUBECTL_VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
            echo "Installing kubectl version $KUBECTL_VERSION"
            curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/kubectl
      - run:
          name: Login to Azure and set AKS credentials
          command: |
            az login --service-principal -u $AZURE_SP_APP_ID -p $AZURE_SP_CLIENT_SECRET --tenant $AZURE_TENANT_ID
            az aks get-credentials --resource-group "$AZURE_RESOURCE_GROUP" --name "$AKS_CLUSTER_NAME" --overwrite-existing
      - run:
          name: Deploy backend and frontend to AKS
          command: |
            kubectl apply -f k8s/db-secret.yaml
            kubectl apply -f k8s/backend-deployment.yaml
            kubectl apply -f k8s/backend-service.yaml
            kubectl apply -f k8s/frontend-deployment.yaml
            kubectl apply -f k8s/frontend-service.yaml
      - run:
          name: Restart Deployments to Pick Up Changes
          command: |
            kubectl rollout restart deployment backend-deployment
            kubectl rollout restart deployment frontend-deployment

workflows:
  build_test_push:
    jobs:
      - build
      - test:
          requires:
            - build
      - push:
          requires:
            - test
      - deploy:
          requires:
            - push